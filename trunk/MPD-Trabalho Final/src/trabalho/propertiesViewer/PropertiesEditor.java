package trabalho.propertiesViewer;

import exceptions.PropertiesEditorException;
import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import trabalho.comboBoxModel.ComboBoxModelAdapter;
import trabalho.dataMappers.IDataMapper;
import trabalho.dataMappers.registry.MapperRegistry;
import trabalho.propertiesUtils.PropertiesUtils;
import trabalho.propertiesUtils.PropertyInfo;
import trabalho.propertiesUtils.PropertyKind;
import trabalho.propertySetter.GenericPropertySetter;
import trabalho.propertySetter.IPropertySetter;

public class PropertiesEditor<T> extends AbstractPropertiesForm<T>{

    private final JButton _updateBtn = new JButton("Update");

    public PropertiesEditor(T t, ActionListener listener) {
        super(t);
        if (listener != null)
            addUpdateListener(listener);
        _updateBtn.setVisible(false);
        add(_updateBtn,BorderLayout.SOUTH);
        doPopulatePropsForm();
    }

    public PropertiesEditor(T t) {
        this(t,null);
    }

    public void doPopulatePropsForm() {
        Map<String, PropertyInfo> props = PropertiesUtils.getVisiblePropertiesWithKind(_obj);
        JTextField _propField;
        JComboBox _propCombo;
        JLabel _propLabel;
        
        String key;
        PropertyKind kind;
        Class valClass = void.class;

        PropertyInfo value;
        IPropertySetter<T> genericPropSetter;

        for (Map.Entry<String, PropertyInfo> entry : props.entrySet()) {
            key = entry.getKey();
            value = entry.getValue();
            kind = entry.getValue().getKind();
            _propLabel = getLabel(key);
            _propsForm.add(_propLabel);
            if (kind == PropertyKind.Simple || kind == PropertyKind.Complex) {
                if (kind == PropertyKind.Simple) {
                    _propField = getTextField(value.getValue().toString());
                    if(value.isAutoGenerated())
                        _propField.setEditable(false);
                    valClass = value.getValue().getClass();
                    _properties.put(key, new PropertyMembers(_propField));
                    _propsForm.add(_propField);

                } else if (kind == PropertyKind.Complex) {
                    try {
                        _propCombo = getPickList(value.getLookupClass(), value.getMethod().invoke(_obj));
                    } catch (IllegalAccessException ex) {
                        throw new PropertiesEditorException();
                    } catch (IllegalArgumentException ex) {
                        throw new PropertiesEditorException();
                    } catch (InvocationTargetException ex) {
                        throw new PropertiesEditorException();
                    }
                    valClass = value.getLookupClass();
                    _properties.put(key, new PropertyMembers(_propCombo));
                    _propsForm.add(_propCombo);
                }
                genericPropSetter = new GenericPropertySetter<T>(key,valClass);
                addPropertySetter(key, genericPropSetter);
            }
        }
    }

    public void addUpdateListener(ActionListener listener) {
        if (listener != null) {
            _updateBtn.setVisible(true);
            _updateBtn.addActionListener(listener);
        }
    }

    public void addPropertySetter(String propName, IPropertySetter<T> setter) {
        try {
            _properties.get(propName).editEnable(setter);
            addUpdateListener(_properties.get(propName));
        } catch (NullPointerException ex) {
            ex.printStackTrace();
            throw new PropertiesEditorException();
        }
    }

    public JComboBox getPickList(Class lookupClass, Object currValue) {
        ComboBoxModelAdapter comboModel = new ComboBoxModelAdapter();
        IDataMapper mapper = MapperRegistry.current().get(lookupClass);
        mapper.loadAllInto(comboModel);
        comboModel.setSelectedItem(currValue);
        JComboBox cmb = new JComboBox();
        cmb.setModel(comboModel);
        cmb.setSelectedItem(comboModel.getSelectedItem());
        return cmb;
    }
}
