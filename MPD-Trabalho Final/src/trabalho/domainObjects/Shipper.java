package trabalho.domainObjects;

import annotations.PropertyValidator;
import annotations.VisibleProperty;
import exceptions.DomainObjectValidatorException;
import trabalho.propertiesUtils.PropertyKind;

public class Shipper extends DomainObject<Integer, Shipper>{

    private String _companyName;
    private String _phone;

    public Shipper() { super(); }

    public Shipper(Integer id, String name, String phone){
        super(id);
        _companyName = name;
        _phone = phone;
        System.out.println("Shipper " + id + " loaded!");
    }

    public Shipper(String name, String phone){
        super();
        _companyName = name;
        _phone = phone;
    }

    @VisibleProperty(name = "Company", kind = PropertyKind.Simple, isAutoGenerated=false)
    public String getCompanyName() { return _companyName; }
    @VisibleProperty(name = "Company", kind = PropertyKind.Simple, isAutoGenerated=false)
    public void setCompanyName(String companyName) {
        markDirty();
        this._companyName = companyName;
    }
    @PropertyValidator(name="Company")
    public void countryLength(String company) throws DomainObjectValidatorException {
        if (company.length() == 0 || company.length() > 40)
            throw new DomainObjectValidatorException("Company must be no longer than 40 chars and must be at least 1.");
    }

    @VisibleProperty(name = "Phone", kind = PropertyKind.Simple, isAutoGenerated=false)
    public String getPhone() { return _phone; }
    @VisibleProperty(name = "Phone", kind = PropertyKind.Simple, isAutoGenerated=false)
    public void setPhone(String phone) { 
        markDirty();
        this._phone = phone;
    }
    @PropertyValidator(name="Phone")
    public void phoneLength(String phone) throws DomainObjectValidatorException {
        if (phone.length() > 24)
            throw new DomainObjectValidatorException("Phone must be no longer than 24 chars.");
    }

    @Override
    protected Shipper self() {
        return this;
    }

    @Override
    public String toString(){
        return "Shipper " + getId() + " - " + getCompanyName();
    }
}
